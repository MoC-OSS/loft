{"version":3,"file":"ChatHistory.js","sourceRoot":"","sources":["../../src/session/ChatHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNotUndefined } from '../helpers';\nimport { Message } from './Message';\nimport { QueryByArrayOfObjects } from './QueryByArrayOfInstance';\nimport { getLogger } from './../Logger';\nimport { Logger } from 'pino';\nimport { PalmMessage } from '../@types';\n\nconst logger = getLogger('ChatHistory');\n\nconst l = Symbol('logger');\n\nexport class ChatHistory extends QueryByArrayOfObjects<Message> {\n  private readonly [l]: Logger; // this Symbol property for exclude logger from built-in Array methods of instance\n\n  constructor(\n    sessionId: string,\n    systemMessageName: string,\n    ...items: Message[]\n  ) {\n    super(...items.map((item) => new Message(item)));\n    this[l] = logger.child({ sessionId, systemMessageName });\n    this[l].info(`ChatHistory initialization...`);\n  }\n\n  append(message: Message): void {\n    this[l].info(`append new message`);\n    this.push(message);\n  }\n\n  // partial update by id\n  updateById(id: string, newData: Partial<Message>): void {\n    this[l].info(`update message with id: ${id}`);\n    const index = this.findIndex((message) => message.id === id);\n    if (index === -1) {\n      throw new Error(`Message with id \"${id}\" not found`);\n    }\n\n    this[index] = new Message(Object.assign({}, this[index], newData));\n  }\n\n  archiveById(id: string): void {\n    this[l].info(`archive message with id: ${id}`);\n    this.updateById(id, { isArchived: true });\n  }\n\n  deleteById(id: string): void {\n    this[l].info(`delete message by id: ${id}`);\n    const index = this.findIndex((message) => message.id === id);\n    if (index === -1) {\n      throw new Error(`Message with id \"${id}\" not found`);\n    }\n    this.splice(index, 1);\n  }\n\n  appendAfterMessageId(message: Message, id: string): void {\n    this[l].info(`append message after message by id: ${id}`);\n    const index = this.findIndex((message) => message.id === id);\n    if (index === -1) {\n      throw new Error(`Message with id \"${id}\" not found`);\n    }\n    this.splice(index + 1, 0, message);\n  }\n\n  replaceById(id: string, message: Message): void {\n    this[l].info(`replace message by id: ${id}`);\n    const index = this.findIndex((message) => message.id === id);\n    if (index === -1) {\n      throw new Error(`Message with id \"${id}\" not found`);\n    }\n    this[index] = message;\n  }\n\n  replaceAll(messages: Message[]): ChatHistory {\n    this[l].info(`replace all messages`);\n    this.length = 0;\n    this.push(...messages);\n    return this;\n  }\n\n  public formatToLLM(): PalmMessage[] {\n    this[l].info(`format messages to LLM format`);\n    let messages = this.map((message) => message.formatToLLM()).filter(\n      isNotUndefined,\n    );\n\n    return messages;\n  }\n}\n"]}