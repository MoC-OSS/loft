{"version":3,"file":"Session.js","sourceRoot":"","sources":["../../src/session/Session.ts"],"names":[],"mappings":"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","sourcesContent":["import { PalmExample, SessionProps } from './../@types';\nimport { SessionStorage } from './SessionStorage';\nimport { SystemMessageType } from '../schema/CreateChatCompletionRequestSchema';\nimport { ChatHistory } from './ChatHistory';\nimport { getLogger } from './../Logger';\nimport { Message } from './Message';\n\nconst l = getLogger('Session');\n\nexport class Session implements SessionProps {\n  readonly sessionId: string;\n  readonly systemMessageName: string;\n  readonly systemMessage: string;\n  readonly model: string;\n  readonly modelPreset: SystemMessageType['modelPreset'];\n  messages: ChatHistory;\n  readonly examples: PalmExample[];\n  lastMessageByRole: {\n    user: Message | null;\n    assistant: Message | null;\n  };\n  handlersCount: Record<string, number>;\n  public ctx: Record<string, unknown>;\n  messageAccumulator: Message[] | null;\n  readonly createdAt: number;\n  updatedAt: number;\n  lastError: string | null;\n\n  constructor(\n    private readonly sessionStorage: SessionStorage,\n    sessionData: SessionProps,\n  ) {\n    this.sessionId = sessionData.sessionId;\n    this.systemMessageName = sessionData.systemMessageName;\n    this.systemMessage = sessionData.systemMessage;\n\n    l.info(`${this.logPrefix()} Session initialization...`);\n\n    this.model = sessionData.model;\n    this.modelPreset = sessionData.modelPreset;\n    this.messages = new ChatHistory(\n      sessionData.sessionId,\n      sessionData.systemMessageName,\n      ...sessionData.messages,\n    );\n    this.examples = sessionData.examples;\n    this.lastMessageByRole = sessionData.lastMessageByRole;\n    this.handlersCount = sessionData.handlersCount;\n    this.ctx = sessionData.ctx;\n    this.messageAccumulator = sessionData.messageAccumulator || null;\n    this.createdAt = sessionData.createdAt;\n    this.updatedAt = sessionData.updatedAt;\n    this.lastError = sessionData.lastError;\n  }\n\n  private logPrefix(): string {\n    return `sessionId: ${this.sessionId}, systemMessageName: ${this.systemMessageName} -`;\n  }\n\n  public async save(): Promise<Session> {\n    l.info(`${this.logPrefix()} - save session`);\n    return this.sessionStorage.save(this);\n  }\n\n  public async delete(): Promise<void> {\n    l.info(`${this.logPrefix()} - delete session`);\n    this.sessionStorage.deleteSession(this.sessionId, this.systemMessageName);\n  }\n\n  public toJSON(): SessionProps {\n    return {\n      sessionId: this.sessionId,\n      systemMessageName: this.systemMessageName,\n      systemMessage: this.systemMessage,\n      model: this.model,\n      modelPreset: this.modelPreset,\n      messages: this.messages,\n      examples: this.examples,\n      lastMessageByRole: this.lastMessageByRole,\n      handlersCount: this.handlersCount,\n      ctx: this.ctx,\n      messageAccumulator: this.messageAccumulator,\n      createdAt: this.createdAt,\n      updatedAt: this.updatedAt,\n      lastError: this.lastError,\n    };\n  }\n}\n"]}