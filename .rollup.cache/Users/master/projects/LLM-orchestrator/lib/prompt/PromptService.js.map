{"version":3,"file":"PromptService.js","sourceRoot":"","sources":["../../src/prompt/PromptService.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAIxC,MAAM,CAAC,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;AAErC,MAAM,OAAO,aAAa;IAIL;IACA;IAJX,eAAe,GAAoB,IAAI,GAAG,EAAE,CAAC;IAErD,YACmB,aAA4B,EAC5B,EAAmB;QADnB,kBAAa,GAAb,aAAa,CAAe;QAC5B,OAAE,GAAF,EAAE,CAAiB;IACnC,CAAC;IAEJ,GAAG,CAAC,IAAY,EAAE,cAA8B;QAC9C,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAClC,MAAM,IAAI,KAAK,CACb,mCAAmC,IAAI,mBAAmB,CAC3D,CAAC;SACH;QAED,CAAC,CAAC,IAAI,CAAC,4CAA4C,IAAI,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,WAAW;QACf,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3C,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,UAAkB,EAClB,OAAgB;QAEhB,CAAC,CAAC,IAAI,CACJ,cAAc,OAAO,CAAC,SAAS,sBAAsB,UAAU,uBAAuB,CACvF,CAAC;QACF,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC5D,CAAC,CAAC,IAAI,CACJ,cAAc,OAAO,CAAC,SAAS,sBAAsB,UAAU,gBAAgB,CAChF,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CACb,qBAAqB,UAAU,6GAA6G,CAC7I,CAAC;SACH;QAED,CAAC,CAAC,IAAI,CACJ,cAAc,OAAO,CAAC,SAAS,kCAAkC,UAAU,+BAA+B,CAC3G,CAAC;QACF,IAAI,MAAM,IAAI,cAAc,EAAE;YAC5B,CAAC,CAAC,IAAI,CACJ,cAAc,OAAO,CAAC,SAAS,wBAAwB,UAAU,KAAK,CACvE,CAAC;YACF,OAAO,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACxC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import { PromptComputer, PromptComputers, SessionProps } from '../@types';\nimport { PromptType } from '../schema/PromptSchema';\nimport { PromptStorage } from './PromptStorage';\nimport { getLogger } from './../Logger';\nimport { IStorageService } from '../memory/CloudObjectStorage';\nimport { Session } from '../session/Session';\n\nconst l = getLogger('PromptService');\n\nexport class PromptService {\n  private promptComputers: PromptComputers = new Map();\n\n  constructor(\n    private readonly promptStorage: PromptStorage,\n    private readonly s3: IStorageService,\n  ) {}\n\n  use(name: string, promptComputer: PromptComputer) {\n    if (this.promptComputers.has(name)) {\n      throw new Error(\n        `A PromptComputer with the name \"${name}\" already exists.`,\n      );\n    }\n\n    l.info(`Registered PromptComputer with the name \"${name}\".`);\n    this.promptComputers.set(name, promptComputer);\n  }\n\n  async syncPrompts(): Promise<void> {\n    l.info('getting prompts from S3...');\n    const prompts = await this.s3.getPrompts();\n    l.info('syncing prompts to redis...');\n    await this.promptStorage.syncPrompts(prompts);\n  }\n\n  async computePrompt(\n    promptName: string,\n    session: Session,\n  ): Promise<PromptType> {\n    l.info(\n      `sessionId: ${session.sessionId} - getting prompt: ${promptName} computer from map...`,\n    );\n    const promptComputer = this.promptComputers.get(promptName);\n    l.info(\n      `sessionId: ${session.sessionId} - getting prompt: ${promptName} from redis...`,\n    );\n    const prompt = await this.promptStorage.getPromptByName(promptName);\n    if (!prompt) {\n      throw new Error(\n        `Prompt with name \"${promptName}\" does not exist. Please upload Prompts with model presets to AWS S3 for sync to Redis and restart the App.`,\n      );\n    }\n\n    l.info(\n      `sessionId: ${session.sessionId} - checking if prompt by name: ${promptName} and promptComputer exists...`,\n    );\n    if (prompt && promptComputer) {\n      l.info(\n        `sessionId: ${session.sessionId} - computing prompt: ${promptName}...`,\n      );\n      return promptComputer(prompt, session);\n    }\n\n    return prompt;\n  }\n}\n"]}