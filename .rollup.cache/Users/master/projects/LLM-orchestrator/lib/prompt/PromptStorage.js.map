{"version":3,"file":"PromptStorage.js","sourceRoot":"","sources":["../../src/prompt/PromptStorage.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,CAAC,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;AAErC,MAAM,OAAO,aAAa;IAChB,MAAM,CAAkB;IAEhC,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,IAAqB;QAC5C,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QACtC,MAAM,aAAa,GAAgB,IAAI,GAAG,EAAE,CAAC;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAExC,+DAA+D;QAC/D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACzB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,yCAAyC;QACzC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhD,kFAAkF;QAClF,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAClC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,IAAY;QACvC,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,gBAAgB,CAAC,CAAC;QAChD,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS;gBAAE,OAAO,IAAI,CAAC;YAErD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;SAC/B;QAAC,OAAO,KAAK,EAAE;YACd,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACf,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,IAAY,EAAE,MAAc;QAC1D,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,cAAc,CAAC,CAAC;QAC/C,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,IAAY;QAC1C,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,gBAAgB,CAAC,CAAC;QACjD,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import { Redis, Cluster } from 'ioredis';\nimport { PromptType, PromptsFileType } from '../schema/PromptSchema';\nimport { getLogger } from './../Logger';\n\nconst l = getLogger('PromptStorage');\n\nexport class PromptStorage {\n  private client: Redis | Cluster;\n\n  constructor(client: Redis | Cluster) {\n    this.client = client;\n  }\n\n  public async syncPrompts(data: PromptsFileType): Promise<void> {\n    l.info('syncing prompts to redis...');\n    const existingNames: Set<string> = new Set();\n    const pipeline = this.client.pipeline();\n\n    // Iterate through the ingested Prompts and store them in Redis\n    data.prompts.forEach((p) => {\n      pipeline.set(p.name, JSON.stringify(p));\n      existingNames.add(p.name);\n    });\n\n    // Retrieve the existing names from Redis\n    const storedNames = await this.client.keys('*');\n\n    // Find and remove the Prompts with names that are missing in the received Prompts\n    storedNames.forEach((storedName) => {\n      if (!existingNames.has(storedName)) {\n        pipeline.del(storedName);\n      }\n    });\n\n    await pipeline.exec();\n  }\n\n  public async getPromptByName(name: string): Promise<PromptType | null> {\n    l.info(`getting prompt: ${name} from redis...`);\n    try {\n      const data = await this.client.get(name);\n      if (data === null || data === undefined) return null;\n\n      return JSON.parse(data ?? '');\n    } catch (error) {\n      l.error(error);\n      throw error;\n    }\n  }\n\n  public async updatePromptByName(name: string, prompt: string): Promise<void> {\n    l.info(`updating prompt: ${name} in redis...`);\n    await this.client.set(name, prompt);\n  }\n\n  public async deletePromptByName(name: string): Promise<void> {\n    l.info(`deleting prompt: ${name} from redis...`);\n    await this.client.del(name);\n  }\n}\n"]}