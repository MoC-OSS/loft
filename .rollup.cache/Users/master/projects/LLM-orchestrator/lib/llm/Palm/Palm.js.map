{"version":3,"file":"Palm.js","sourceRoot":"","sources":["../../../src/llm/Palm/Palm.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AAI5E,2DAA2D;AAC3D,2CAA2C;AAC3C,iGAAiG;AACjG,kBAAkB;AAClB,2IAA2I;AAC3I,SAAS;AACT,kBAAkB;AAClB,uFAAuF;AACvF,QAAQ;AACR,OAAO;AACP,MAAM,OAAO,IAAI;IAIL;IACA;IACA;IACA;IANF,uBAAuB,CAA0B;IAEzD,YACU,OAAe,EACf,cAAsB,uCAAuC,EAC7D,WAAmB,aAAa,EAChC,YAAoB,QAAQ;QAH5B,YAAO,GAAP,OAAO,CAAQ;QACf,gBAAW,GAAX,WAAW,CAAkD;QAC7D,aAAQ,GAAR,QAAQ,CAAwB;QAChC,cAAS,GAAT,SAAS,CAAmB;QAEpC,MAAM,aAAa,GAAG;YACpB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;QAEF,IAAI,CAAC,uBAAuB,GAAG,IAAI,uBAAuB,CAAC,aAAa,CAAC,CAAC;IAC5E,CAAC;IAEO,WAAW,CAAC,KAAa;QAC/B,OAAO,YAAY,IAAI,CAAC,OAAO,cAAc,IAAI,CAAC,QAAQ,eAAe,IAAI,CAAC,SAAS,WAAW,KAAK,EAAE,CAAC;IAC5G,CAAC;IAEM,KAAK,CAAC,WAAW,CACtB,QAA4B,EAC5B,UAAgC,EAChC,QAAgB,gBAAgB;QAEhC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG;YACd,QAAQ;YACR,SAAS,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtC,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;SACxC,CAAC;QAEF,IAAI;YACF,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAC3D,OAAc,CACf,CAAC;YACF,IAAI,OAAO,GAAG,QAAQ,CAAC,WAAkD,CAAC;YAE1E,MAAM,MAAM,GAAG;gBACb,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;oBACnC,OAAO,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACpC,CAAC,CAAiB;gBAClB,QAAQ,EAAE,OAAO,CAAC,SAAS,CACzB,QAAQ,CAAC,QAA6C,CAC3C;aACd,CAAC;YAEF,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF","sourcesContent":["import { PredictionServiceClient, helpers } from '@google-cloud/aiplatform';\nimport { Metadata, Prediction, PredictionResponse } from './@types/response';\nimport { PredictionInstance, PredictionParameters } from './@types/request';\n\n// const palm = new Palm('gcp-project-name', 'model-name');\n//   const instance: PredictionInstance = {\n//     context: 'My name is Miles. You are an astronomer, knowledgeable about the solar system.',\n//     examples: [\n//       { input: { content: 'How many moons does Mars have?' }, output: { content: 'The planet Mars has two moons, Phobos and Deimos.' } }\n//     ],\n//     messages: [\n//       { author: 'user', content: 'How many planets are there in the solar system?' }\n//     ]\n//   };\nexport class Palm {\n  private predictionServiceClient: PredictionServiceClient;\n\n  constructor(\n    private project: string,\n    private apiEndpoint: string = 'us-central1-aiplatform.googleapis.com',\n    private location: string = 'us-central1',\n    private publisher: string = 'google',\n  ) {\n    const clientOptions = {\n      apiEndpoint: this.apiEndpoint,\n    };\n\n    this.predictionServiceClient = new PredictionServiceClient(clientOptions);\n  }\n\n  private getEndpoint(model: string): string {\n    return `projects/${this.project}/locations/${this.location}/publishers/${this.publisher}/models/${model}`;\n  }\n\n  public async callPredict(\n    instance: PredictionInstance,\n    parameters: PredictionParameters,\n    model: string = 'chat-bison@001',\n  ): Promise<PredictionResponse> {\n    const endpoint = this.getEndpoint(model);\n    const request = {\n      endpoint,\n      instances: [helpers.toValue(instance)],\n      parameters: helpers.toValue(parameters),\n    };\n\n    try {\n      const [response] = await this.predictionServiceClient.predict(\n        request as any,\n      );\n      let resData = response.predictions as unknown as protobuf.common.IValue[];\n\n      const result = {\n        predictions: resData.map((element) => {\n          return helpers.fromValue(element);\n        }) as Prediction[],\n        metadata: helpers.fromValue(\n          response.metadata as unknown as protobuf.common.IValue,\n        ) as Metadata,\n      };\n\n      return result;\n    } catch (error) {\n      console.error(`Error occurred during prediction: ${error}`);\n      throw error;\n    }\n  }\n}\n"]}