{"version":3,"file":"SystemMessageStorage.js","sourceRoot":"","sources":["../../src/systemMessage/SystemMessageStorage.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAE5C,MAAM,OAAO,oBAAoB;IACvB,MAAM,CAAkB;IAEhC,YAAY,MAAuB;QACjC,CAAC,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAC7B,IAAqC;QAErC,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAgB,IAAI,GAAG,EAAE,CAAC;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAExC,sEAAsE;QACtE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAChC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,yCAAyC;QACzC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhD,gGAAgG;QAChG,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAClC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,sBAAsB,CACjC,IAAY;QAEZ,IAAI;YACF,CAAC,CAAC,IAAI,CAAC,0BAA0B,IAAI,gBAAgB,CAAC,CAAC;YAEvD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS;gBAAE,OAAO,IAAI,CAAC;YAErD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;SAC/B;QAAC,OAAO,KAAK,EAAE;YACd,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACf,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,yBAAyB,CACpC,IAAY,EACZ,gBAAwB;QAExB,CAAC,CAAC,IAAI,CAAC,2BAA2B,IAAI,cAAc,CAAC,CAAC;QACtD,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,IAAY;QACjD,CAAC,CAAC,IAAI,CAAC,2BAA2B,IAAI,gBAAgB,CAAC,CAAC;QACxD,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import { Redis, Cluster } from 'ioredis';\nimport {\n  CreateChatCompletionRequestType,\n  SystemMessageType,\n} from '../schema/CreateChatCompletionRequestSchema';\nimport { getLogger } from './../Logger';\n\nconst l = getLogger('SystemMessageStorage');\n\nexport class SystemMessageStorage {\n  private client: Redis | Cluster;\n\n  constructor(client: Redis | Cluster) {\n    l.info('SystemMessageStorage initialization...');\n    this.client = client;\n  }\n\n  public async syncSystemMessages(\n    data: CreateChatCompletionRequestType,\n  ): Promise<void> {\n    l.info('syncing systemMessages to redis...');\n    const existingNames: Set<string> = new Set();\n    const pipeline = this.client.pipeline();\n\n    // Iterate through the ingested SystemMessages and store them in Redis\n    data.systemMessages.forEach((p) => {\n      pipeline.set(p.name, JSON.stringify(p));\n      existingNames.add(p.name);\n    });\n\n    // Retrieve the existing names from Redis\n    const storedNames = await this.client.keys('*');\n\n    // Find and remove the SystemMessages with names that are missing in the received SystemMessages\n    storedNames.forEach((storedName) => {\n      if (!existingNames.has(storedName)) {\n        pipeline.del(storedName);\n      }\n    });\n\n    await pipeline.exec();\n  }\n\n  public async getSystemMessageByName(\n    name: string,\n  ): Promise<SystemMessageType | null> {\n    try {\n      l.info(`getting systemMessage: ${name} from redis...`);\n\n      const data = await this.client.get(name);\n      if (data === null || data === undefined) return null;\n\n      return JSON.parse(data ?? '');\n    } catch (error) {\n      l.error(error);\n      throw error;\n    }\n  }\n\n  public async updateSystemMessageByName(\n    name: string,\n    newSystemMessage: string,\n  ): Promise<void> {\n    l.info(`updating systemMessage: ${name} in redis...`);\n    await this.client.set(name, newSystemMessage);\n  }\n\n  public async deleteSystemMessageByName(name: string): Promise<void> {\n    l.info(`deleting systemMessage: ${name} from redis...`);\n    await this.client.del(name);\n  }\n}\n"]}