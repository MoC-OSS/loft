{"version":3,"file":"SystemMessageService.js","sourceRoot":"","sources":["../../src/systemMessage/SystemMessageService.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC,MAAM,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAE5C,MAAM,OAAO,oBAAoB;IAIZ;IACA;IAJX,sBAAsB,GAA2B,IAAI,GAAG,EAAE,CAAC;IAEnE,YACmB,oBAA0C,EAC1C,EAAmB;QADnB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,OAAE,GAAF,EAAE,CAAiB;QAEpC,CAAC,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QACjD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAED,GAAG,CAAC,IAAY,EAAE,qBAA4C;QAC5D,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CACb,2CAA2C,IAAI,mBAAmB,CACnE,CAAC;SACH;QACD,CAAC,CAAC,IAAI,CAAC,oDAAoD,IAAI,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC5C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC;QACzD,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC7C,MAAM,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,iBAAyB,EACzB,OAAyB;QAEzB,CAAC,CAAC,IAAI,CAAC,0BAA0B,iBAAiB,uBAAuB,CAAC,CAAC;QAC3E,MAAM,qBAAqB,GACzB,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACrD,CAAC,CAAC,IAAI,CAAC,0BAA0B,iBAAiB,gBAAgB,CAAC,CAAC;QACpE,MAAM,aAAa,GACjB,MAAM,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;QAE5E,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,KAAK,CACb,4BAA4B,iBAAiB,oHAAoH,CAClK,CAAC;SACH;QAED,CAAC,CAAC,IAAI,CACJ,sCAAsC,iBAAiB,sCAAsC,CAC9F,CAAC;QACF,IAAI,aAAa,IAAI,qBAAqB,EAAE;YAC1C,CAAC,CAAC,IAAI,CACJ,4BAA4B,iBAAiB,gCAAgC,CAC9E,CAAC;YACF,OAAO,qBAAqB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SACtD;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;CACF","sourcesContent":["import {\n  ChatInputPayload,\n  InputPayload,\n  SystemMessageComputer,\n  SystemMessageComputers,\n} from '../@types';\nimport { SystemMessageType } from '../schema/CreateChatCompletionRequestSchema';\nimport { SystemMessageStorage } from './SystemMessageStorage';\nimport { getLogger } from './../Logger';\nimport { IStorageService } from '../memory/CloudObjectStorage';\n\nconst l = getLogger('SystemMessageService');\n\nexport class SystemMessageService {\n  private systemMessageComputers: SystemMessageComputers = new Map();\n\n  constructor(\n    private readonly systemMessageStorage: SystemMessageStorage,\n    private readonly s3: IStorageService,\n  ) {\n    l.info('SystemMessageService initialization...');\n    this.systemMessageStorage = systemMessageStorage;\n  }\n\n  use(name: string, systemMessageComputer: SystemMessageComputer) {\n    if (this.systemMessageComputers.has(name)) {\n      throw new Error(\n        `A systemMessage computer with the name \"${name}\" already exists.`,\n      );\n    }\n    l.info(`Registered systemMessage computer with the name \"${name}\".`);\n    this.systemMessageComputers.set(name, systemMessageComputer);\n  }\n\n  async syncSystemMessages(): Promise<void> {\n    l.info('getting systemMessages from S3...');\n    const systemMessages = await this.s3.getSystemMessages();\n    l.info('syncing systemMessages to redis...');\n    await this.systemMessageStorage.syncSystemMessages(systemMessages);\n  }\n\n  async computeSystemMessage(\n    systemMessageName: string,\n    context: ChatInputPayload,\n  ): Promise<SystemMessageType> {\n    l.info(`getting systemMessage: ${systemMessageName} computer from map...`);\n    const systemMessageComputer =\n      this.systemMessageComputers.get(systemMessageName);\n    l.info(`getting systemMessage: ${systemMessageName} from redis...`);\n    const systemMessage =\n      await this.systemMessageStorage.getSystemMessageByName(systemMessageName);\n\n    if (!systemMessage) {\n      throw new Error(\n        `SystemMessage with name \"${systemMessageName}\" does not exist. Please upload SystemMessages with model presets to AWS S3 for sync to Redis and restart the App.`,\n      );\n    }\n\n    l.info(\n      `checking if systemMessage by name: ${systemMessageName} and systemMessageComputer exists...`,\n    );\n    if (systemMessage && systemMessageComputer) {\n      l.info(\n        `computing systemMessage: ${systemMessageName} with systemMessageComputer...`,\n      );\n      return systemMessageComputer(systemMessage, context);\n    }\n\n    return systemMessage;\n  }\n}\n"]}