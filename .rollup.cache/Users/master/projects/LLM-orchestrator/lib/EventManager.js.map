{"version":3,"file":"EventManager.js","sourceRoot":"","sources":["../src/EventManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { SessionStorage } from './session/SessionStorage';\nimport {\n  ChatCompletionCallInitiator,\n  ErrorHandler,\n  OutputContext,\n} from './@types';\nimport { getLogger } from './Logger';\n\nconst l = getLogger('EventManager');\n\nexport type EventDetector = (\n  response: OutputContext,\n  next: () => Promise<void>,\n) => Promise<boolean>;\n\nexport type Handler = (\n  response: OutputContext,\n  next: () => Promise<void>,\n) => Promise<void>;\n\nexport interface EventHandler {\n  eventDetector: EventDetector;\n  handler: Handler;\n  priority: number;\n  maxLoops: number;\n}\n\nexport type DefaultHandler = (response: OutputContext) => Promise<void>;\n\nexport interface TriggeredEvent {\n  name: string;\n  priority: number;\n}\n\nexport class EventManager {\n  private eventHandlers: Map<string, EventHandler>;\n  private defaultEventHandler: DefaultHandler;\n\n  constructor(\n    private readonly sessionStorage: SessionStorage,\n    private errorHandler: ErrorHandler,\n  ) {\n    l.info('EventManager initialization...');\n\n    this.defaultEventHandler = async () => {\n      l.error(\n        'LLM Event not detected. Library try to continue with DefaultEventHandler, but it is not defined. Please define using useDefaultHandler(response: string): Promise<void> to receive the response.',\n      );\n    };\n\n    this.eventHandlers = new Map();\n  }\n\n  use(name: string, eventHandler: EventHandler) {\n    if (this.eventHandlers.has(name)) {\n      throw new Error(\n        `An event handler with the name \"${name}\" already exists.`,\n      );\n    }\n\n    // Set a default value for maxLoops if it's not set\n    if (eventHandler.maxLoops === undefined) {\n      eventHandler.maxLoops = 10; // default value\n    }\n    // Set a default value for priority if it's not set\n    if (!eventHandler.priority) {\n      eventHandler.priority = 0; // default value\n    }\n\n    l.info(\n      `Registered event handler with the name \"${name}\". Priority: ${eventHandler.priority}. Max Loops: ${eventHandler.maxLoops}.`,\n    );\n\n    this.eventHandlers.set(name, eventHandler);\n  }\n\n  useDefault(eventHandler: DefaultHandler) {\n    l.info(`Registered default EventHandler.`);\n    this.defaultEventHandler = eventHandler;\n  }\n\n  async executeEventHandlers(response: OutputContext): Promise<void> {\n    let eventHandlersIterator = this.eventHandlers.entries();\n    let currentEventHandlerEntry = eventHandlersIterator.next();\n    let triggeredEvents: TriggeredEvent[] = [];\n\n    try {\n      const next = async (): Promise<void> => {\n        if (currentEventHandlerEntry.done) return;\n        let [name, eventHandler] = currentEventHandlerEntry.value;\n        currentEventHandlerEntry = eventHandlersIterator.next();\n\n        try {\n          const trigger = await eventHandler.eventDetector(response, next);\n          if (trigger) {\n            triggeredEvents.push({ name, priority: eventHandler.priority });\n          }\n        } catch (error) {\n          l.error(\n            `Error occurred in eventDetector of event handler ${name}: ${error}`,\n          );\n          throw error;\n        }\n      };\n\n      await next();\n\n      // if no event handler was triggered, execute the default event handler\n      if (triggeredEvents.length === 0)\n        return this.defaultEventHandler(response);\n\n      triggeredEvents.sort((a, b) => b.priority - a.priority);\n\n      if (triggeredEvents.length > 0) {\n        const { name } = triggeredEvents[0];\n        const eventHandler = this.eventHandlers.get(name);\n        if (eventHandler) {\n          try {\n            // tracking the number of times an event handler is called\n            const { sessionId, systemMessageName } = response.session;\n            if (response.initiator === ChatCompletionCallInitiator.call_again)\n              await this.sessionStorage.incrementHandlerCount(\n                sessionId,\n                systemMessageName,\n                name,\n              );\n            response.session = await this.sessionStorage.getSession(\n              sessionId,\n              systemMessageName,\n            );\n\n            // over-loop handler prevention\n            const { handlersCount } = response.session;\n            if (handlersCount[name] >= eventHandler.maxLoops)\n              return this.errorHandler(\n                new Error(\n                  `Max Loops Reached, handler: ${name}, maxLoops: ${eventHandler.maxLoops}, counted maxLoops: ${handlersCount[name]}. Please check your event handlers or if your flow requires it, increase maxLoops property of the event handler to a higher value.`,\n                ),\n                response,\n              );\n\n            await eventHandler.handler(response, () => Promise.resolve());\n          } catch (error) {\n            this.errorHandler(error as Error, response);\n            throw error;\n          }\n        }\n      }\n    } catch (error) {\n      l.error(`Error occurred while executing event handlers: ${error}`);\n    }\n  }\n}\n"]}