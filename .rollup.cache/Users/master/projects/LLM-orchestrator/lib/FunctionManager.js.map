{"version":3,"file":"FunctionManager.js","sourceRoot":"","sources":["../src/FunctionManager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAErC,MAAM,CAAC,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;AASvC,MAAM,OAAO,eAAe;IAC1B,SAAS,CAA8B;IAEvC;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,GAAG,CAAC,IAAY,EAAE,EAAkB;QAClC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,mBAAmB,CAAC,CAAC;SACvE;QAED,CAAC,CAAC,IAAI,CAAC,0CAA0C,IAAI,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import { OutputContext } from './@types';\nimport { getLogger } from './Logger';\n\nconst l = getLogger('FunctionManager');\n\nexport type OpenAiFunctionArgs = any;\n\nexport type OpenAiFunction = (\n  ctx: OutputContext,\n  args: OpenAiFunctionArgs,\n) => Promise<string>;\n\nexport class FunctionManager {\n  functions: Map<string, OpenAiFunction>;\n\n  constructor() {\n    this.functions = new Map();\n  }\n\n  use(name: string, fn: OpenAiFunction) {\n    if (this.functions.has(name)) {\n      throw new Error(`A function with the name \"${name}\" already exists.`);\n    }\n\n    l.info(`Registering AI function with the name \"${name}\".`);\n    this.functions.set(name, fn);\n  }\n}\n"]}