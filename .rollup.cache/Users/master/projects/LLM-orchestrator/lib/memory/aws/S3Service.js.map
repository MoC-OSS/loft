{"version":3,"file":"S3Service.js","sourceRoot":"","sources":["../../../src/memory/aws/S3Service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GetObjectCommand,\n  PutObjectCommand,\n  S3Client,\n  PutBucketLifecycleConfigurationCommand,\n  S3ServiceException,\n} from '@aws-sdk/client-s3';\nimport {\n  CreateChatCompletionRequestType,\n  createChatCompletionRequestSchema,\n} from '../../schema/CreateChatCompletionRequestSchema';\nimport { PromptSchema, PromptsFileType } from '../../schema/PromptSchema';\nimport { getLogger } from '../../Logger';\nimport { IStorageService } from '../CloudObjectStorage';\n\nconst l = getLogger('S3Service');\n\nexport class S3Service implements IStorageService {\n  private readonly client: S3Client;\n\n  constructor(\n    private readonly env: string,\n    private readonly region: string,\n    private readonly bucketName: string,\n    private readonly appName: string,\n  ) {\n    l.info('S3Service initialization...');\n    this.client = new S3Client({ region: this.region });\n    l.info(`Put Bucket Lifecycle Configuration to error log files...`);\n  }\n\n  async getFile(filename: string) {\n    try {\n      l.info(`getting file: ${filename} from S3...`);\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: filename,\n      });\n      const response = await this.client.send(command);\n\n      return response.Body;\n    } catch (err) {\n      if (\n        err instanceof S3ServiceException &&\n        err.$metadata.httpStatusCode == 404\n      ) {\n        l.warn(`File ${filename} not found!`);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  async getSystemMessages(): Promise<CreateChatCompletionRequestType> {\n    try {\n      l.info('getting systemMessages from S3...');\n      const fileName = `${this.appName}/${this.env}/system_messages.json`;\n      const file = await this.getFile(fileName);\n\n      if (file === null || file === undefined) {\n        const errorMessage = `File ${fileName} not found!`;\n        l.error(errorMessage, 'App will be terminated.');\n        await this.logToS3(errorMessage);\n        process.exit(1);\n      }\n\n      l.info('parsing systemMessages...');\n      const systemMessages = JSON.parse(await file.transformToString());\n      l.info('validating systemMessages...');\n      return createChatCompletionRequestSchema.parse(systemMessages);\n    } catch (error) {\n      l.error(error);\n      await this.logToS3((error as Error).toString());\n      throw error;\n    }\n  }\n\n  async getPrompts(): Promise<PromptsFileType> {\n    try {\n      l.info('getting prompts from S3...');\n      const fileName = `${this.appName}/${this.env}/prompts.json`;\n      const file = await this.getFile(fileName);\n\n      if (file === null || file === undefined) {\n        const errorMessage = `File ${fileName} not found!`;\n        l.error(errorMessage, 'App will be terminated.');\n        await this.logToS3(errorMessage);\n        process.exit(1);\n      }\n\n      l.info('parsing prompts...');\n      const prompts = JSON.parse(await file.transformToString());\n      l.info('validating prompts...');\n      return PromptSchema.parse(prompts);\n    } catch (error) {\n      l.error(error);\n      await this.logToS3((error as Error).toString());\n      throw error;\n    }\n  }\n\n  async logToS3(data: string) {\n    l.info('logging error to S3...');\n    const command = new PutObjectCommand({\n      Bucket: this.bucketName,\n      Key: `${this.appName}/${this.env}/log_errors.txt`,\n      Body: data,\n    });\n\n    await this.client.send(command).catch((err) => l.error(err));\n  }\n}\n"]}