{"version":3,"file":"CloudStorageService.js","sourceRoot":"","sources":["../../../src/memory/gcp/CloudStorageService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Storage } from '@google-cloud/storage';\nimport {\n  CreateChatCompletionRequestType,\n  createChatCompletionRequestSchema,\n} from './../../schema/CreateChatCompletionRequestSchema';\nimport { PromptSchema, PromptsFileType } from './../../schema/PromptSchema';\nimport { getLogger } from './../../Logger';\nimport { IStorageService } from '../CloudObjectStorage';\n\nconst l = getLogger('GCPStorageService');\n\nexport class CloudStorageService implements IStorageService {\n  private readonly storage: Storage;\n\n  constructor(\n    private readonly env: string,\n    private readonly bucketName: string,\n    private readonly appName: string,\n  ) {\n    l.info('GCPStorageService initialization...');\n    this.storage = new Storage({});\n    l.info(`Configured Google Cloud Storage.`);\n  }\n\n  async getFile(filename: string): Promise<Buffer | null> {\n    try {\n      l.info(`getting file: ${filename} from GCP Storage...`);\n      const file = this.storage.bucket(this.bucketName).file(filename);\n      const [data] = await file.download();\n      return data;\n    } catch (err) {\n      // if (err.code === 404) {\n      //   l.warn(`File ${filename} not found!`);\n      //   return null;\n      // }\n      throw err;\n    }\n  }\n\n  async getSystemMessages(): Promise<CreateChatCompletionRequestType> {\n    try {\n      l.info('getting systemMessages from GCP Storage...');\n      const fileName = `${this.appName}/${this.env}/system_messages.json`;\n      const file = await this.getFile(fileName);\n\n      if (file === null) {\n        const errorMessage = `File ${fileName} not found!`;\n        l.error(errorMessage, 'App will be terminated.');\n        await this.logToGCP(errorMessage);\n        process.exit(1);\n      }\n\n      l.info('parsing systemMessages...');\n      const systemMessages = JSON.parse(file.toString());\n      l.info('validating systemMessages...');\n      return createChatCompletionRequestSchema.parse(systemMessages);\n    } catch (error) {\n      l.error(error);\n      await this.logToGCP((error as Error).toString());\n      throw error;\n    }\n  }\n\n  async getPrompts(): Promise<PromptsFileType> {\n    try {\n      l.info('getting prompts from GCP Storage...');\n      const fileName = `${this.appName}/${this.env}/prompts.json`;\n      const file = await this.getFile(fileName);\n\n      if (file === null) {\n        const errorMessage = `File ${fileName} not found!`;\n        l.error(errorMessage, 'App will be terminated.');\n        await this.logToGCP(errorMessage);\n        process.exit(1);\n      }\n\n      l.info('parsing prompts...');\n      const prompts = JSON.parse(file.toString());\n      l.info('validating prompts...');\n      return PromptSchema.parse(prompts);\n    } catch (error) {\n      l.error(error);\n      await this.logToGCP((error as Error).toString());\n      throw error;\n    }\n  }\n\n  async logToGCP(data: string) {\n    l.info('logging error to GCP Storage...');\n    const file = this.storage\n      .bucket(this.bucketName)\n      .file(`${this.appName}/${this.env}/log_errors.txt`);\n    await file.save(data).catch((err) => l.error(err));\n  }\n}\n"]}