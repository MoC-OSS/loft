{"version":3,"file":"Palm.js","names":["PredictionServiceClient","helpers","Palm","constructor","project","apiEndpoint","location","publisher","clientOptions","predictionServiceClient","getEndpoint","model","callPredict","instance","parameters","endpoint","request","instances","toValue","response","predict","resData","predictions","result","map","element","fromValue","metadata","error","console"],"sources":["../../../src/llm/Palm/Palm.ts"],"sourcesContent":["import { PredictionServiceClient, helpers } from '@google-cloud/aiplatform';\nimport { Metadata, Prediction, PredictionResponse } from './@types/response';\nimport { PredictionInstance, PredictionParameters } from './@types/request';\n\n// const palm = new Palm('gcp-project-name', 'model-name');\n//   const instance: PredictionInstance = {\n//     context: 'My name is Miles. You are an astronomer, knowledgeable about the solar system.',\n//     examples: [\n//       { input: { content: 'How many moons does Mars have?' }, output: { content: 'The planet Mars has two moons, Phobos and Deimos.' } }\n//     ],\n//     messages: [\n//       { author: 'user', content: 'How many planets are there in the solar system?' }\n//     ]\n//   };\nexport class Palm {\n  private predictionServiceClient: PredictionServiceClient;\n\n  constructor(\n    private project: string,\n    private apiEndpoint: string = 'us-central1-aiplatform.googleapis.com',\n    private location: string = 'us-central1',\n    private publisher: string = 'google',\n  ) {\n    const clientOptions = {\n      apiEndpoint: this.apiEndpoint,\n    };\n\n    this.predictionServiceClient = new PredictionServiceClient(clientOptions);\n  }\n\n  private getEndpoint(model: string): string {\n    return `projects/${this.project}/locations/${this.location}/publishers/${this.publisher}/models/${model}`;\n  }\n\n  public async callPredict(\n    instance: PredictionInstance,\n    parameters: PredictionParameters,\n    model: string = 'chat-bison@001',\n  ): Promise<PredictionResponse> {\n    const endpoint = this.getEndpoint(model);\n    const request = {\n      endpoint,\n      instances: [helpers.toValue(instance)],\n      parameters: helpers.toValue(parameters),\n    };\n\n    try {\n      const [response] = await this.predictionServiceClient.predict(\n        request as any,\n      );\n      let resData = response.predictions as unknown as protobuf.common.IValue[];\n\n      const result = {\n        predictions: resData.map((element) => {\n          return helpers.fromValue(element);\n        }) as Prediction[],\n        metadata: helpers.fromValue(\n          response.metadata as unknown as protobuf.common.IValue,\n        ) as Metadata,\n      };\n\n      return result;\n    } catch (error) {\n      console.error(`Error occurred during prediction: ${error}`);\n      throw error;\n    }\n  }\n}\n"],"mappings":"AAAA,OAASA,uBAAuB,CAAEC,OAAO,KAAQ,0BAA0B,CAc3E,MAAO,MAAM,CAAAC,IAAK,CAGhBC,WAAWA,CACDC,OAAe,CACfC,WAAmB,CAAG,uCAAuC,CAC7DC,QAAgB,CAAG,aAAa,CAChCC,SAAiB,CAAG,QAAQ,CACpC,MAJQH,OAAe,CAAfA,OAAe,MACfC,WAAmB,CAAnBA,WAAmB,MACnBC,QAAgB,CAAhBA,QAAgB,MAChBC,SAAiB,CAAjBA,SAAiB,CAEzB,KAAM,CAAAC,aAAa,CAAG,CACpBH,WAAW,CAAE,IAAI,CAACA,WACpB,CAAC,CAED,IAAI,CAACI,uBAAuB,CAAG,GAAI,CAAAT,uBAAuB,CAACQ,aAAa,CAC1E,CAEQE,WAAWA,CAACC,KAAa,CAAU,CACzC,MAAQ,YAAW,IAAI,CAACP,OAAQ,cAAa,IAAI,CAACE,QAAS,eAAc,IAAI,CAACC,SAAU,WAAUI,KAAM,EAC1G,CAEA,KAAa,CAAAC,WAAWA,CACtBC,QAA4B,CAC5BC,UAAgC,CAChCH,KAAa,CAAG,gBAAgB,CACH,CAC7B,KAAM,CAAAI,QAAQ,CAAG,IAAI,CAACL,WAAW,CAACC,KAAK,CAAC,CACxC,KAAM,CAAAK,OAAO,CAAG,CACdD,QAAQ,CACRE,SAAS,CAAE,CAAChB,OAAO,CAACiB,OAAO,CAACL,QAAQ,CAAC,CAAC,CACtCC,UAAU,CAAEb,OAAO,CAACiB,OAAO,CAACJ,UAAU,CACxC,CAAC,CAED,GAAI,CACF,KAAM,CAACK,QAAQ,CAAC,CAAG,KAAM,KAAI,CAACV,uBAAuB,CAACW,OAAO,CAC3DJ,OACF,CAAC,CACD,GAAI,CAAAK,OAAO,CAAGF,QAAQ,CAACG,WAAkD,CAEzE,KAAM,CAAAC,MAAM,CAAG,CACbD,WAAW,CAAED,OAAO,CAACG,GAAG,CAAEC,OAAO,EAAK,CACpC,MAAO,CAAAxB,OAAO,CAACyB,SAAS,CAACD,OAAO,CAClC,CAAC,CAAiB,CAClBE,QAAQ,CAAE1B,OAAO,CAACyB,SAAS,CACzBP,QAAQ,CAACQ,QACX,CACF,CAAC,CAED,MAAO,CAAAJ,MACT,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAE,qCAAoCA,KAAM,EAAC,CAAC,CAC3D,KAAM,CAAAA,KACR,CACF,CACF"}