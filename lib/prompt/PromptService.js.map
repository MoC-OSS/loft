{"version":3,"file":"PromptService.js","names":["getLogger","l","PromptService","promptComputers","Map","constructor","promptStorage","s3","use","name","promptComputer","has","Error","info","set","syncPrompts","prompts","getPrompts","computePrompt","promptName","session","sessionId","get","prompt","getPromptByName"],"sources":["../../src/prompt/PromptService.ts"],"sourcesContent":["import { PromptComputer, PromptComputers, SessionProps } from '../@types';\nimport { PromptType } from '../schema/PromptSchema';\nimport { PromptStorage } from './PromptStorage';\nimport { getLogger } from './../Logger';\nimport { IStorageService } from '../memory/CloudObjectStorage';\nimport { Session } from '../session/Session';\n\nconst l = getLogger('PromptService');\n\nexport class PromptService {\n  private promptComputers: PromptComputers = new Map();\n\n  constructor(\n    private readonly promptStorage: PromptStorage,\n    private readonly s3: IStorageService,\n  ) {}\n\n  use(name: string, promptComputer: PromptComputer) {\n    if (this.promptComputers.has(name)) {\n      throw new Error(\n        `A PromptComputer with the name \"${name}\" already exists.`,\n      );\n    }\n\n    l.info(`Registered PromptComputer with the name \"${name}\".`);\n    this.promptComputers.set(name, promptComputer);\n  }\n\n  async syncPrompts(): Promise<void> {\n    l.info('getting prompts from S3...');\n    const prompts = await this.s3.getPrompts();\n    l.info('syncing prompts to redis...');\n    await this.promptStorage.syncPrompts(prompts);\n  }\n\n  async computePrompt(\n    promptName: string,\n    session: Session,\n  ): Promise<PromptType> {\n    l.info(\n      `sessionId: ${session.sessionId} - getting prompt: ${promptName} computer from map...`,\n    );\n    const promptComputer = this.promptComputers.get(promptName);\n    l.info(\n      `sessionId: ${session.sessionId} - getting prompt: ${promptName} from redis...`,\n    );\n    const prompt = await this.promptStorage.getPromptByName(promptName);\n    if (!prompt) {\n      throw new Error(\n        `Prompt with name \"${promptName}\" does not exist. Please upload Prompts with model presets to AWS S3 for sync to Redis and restart the App.`,\n      );\n    }\n\n    l.info(\n      `sessionId: ${session.sessionId} - checking if prompt by name: ${promptName} and promptComputer exists...`,\n    );\n    if (prompt && promptComputer) {\n      l.info(\n        `sessionId: ${session.sessionId} - computing prompt: ${promptName}...`,\n      );\n      return promptComputer(prompt, session);\n    }\n\n    return prompt;\n  }\n}\n"],"mappings":"AAGA,OAASA,SAAS,KAAQ,aAAa,CAIvC,KAAM,CAAAC,CAAC,CAAGD,SAAS,CAAC,eAAe,CAAC,CAEpC,MAAO,MAAM,CAAAE,aAAc,CACjBC,eAAe,CAAoB,GAAI,CAAAC,GAAK,CAEpDC,WAAWA,CACQC,aAA4B,CAC5BC,EAAmB,CACpC,MAFiBD,aAA4B,CAA5BA,aAA4B,MAC5BC,EAAmB,CAAnBA,EAChB,CAEHC,GAAGA,CAACC,IAAY,CAAEC,cAA8B,CAAE,CAChD,GAAI,IAAI,CAACP,eAAe,CAACQ,GAAG,CAACF,IAAI,CAAC,CAAE,CAClC,KAAM,IAAI,CAAAG,KAAK,CACZ,mCAAkCH,IAAK,mBAC1C,CACF,CAEAR,CAAC,CAACY,IAAI,CAAE,4CAA2CJ,IAAK,IAAG,CAAC,CAC5D,IAAI,CAACN,eAAe,CAACW,GAAG,CAACL,IAAI,CAAEC,cAAc,CAC/C,CAEA,KAAM,CAAAK,WAAWA,CAAA,CAAkB,CACjCd,CAAC,CAACY,IAAI,CAAC,4BAA4B,CAAC,CACpC,KAAM,CAAAG,OAAO,CAAG,KAAM,KAAI,CAACT,EAAE,CAACU,UAAU,CAAC,CAAC,CAC1ChB,CAAC,CAACY,IAAI,CAAC,6BAA6B,CAAC,CACrC,KAAM,KAAI,CAACP,aAAa,CAACS,WAAW,CAACC,OAAO,CAC9C,CAEA,KAAM,CAAAE,aAAaA,CACjBC,UAAkB,CAClBC,OAAgB,CACK,CACrBnB,CAAC,CAACY,IAAI,CACH,cAAaO,OAAO,CAACC,SAAU,sBAAqBF,UAAW,uBAClE,CAAC,CACD,KAAM,CAAAT,cAAc,CAAG,IAAI,CAACP,eAAe,CAACmB,GAAG,CAACH,UAAU,CAAC,CAC3DlB,CAAC,CAACY,IAAI,CACH,cAAaO,OAAO,CAACC,SAAU,sBAAqBF,UAAW,gBAClE,CAAC,CACD,KAAM,CAAAI,MAAM,CAAG,KAAM,KAAI,CAACjB,aAAa,CAACkB,eAAe,CAACL,UAAU,CAAC,CACnE,GAAI,CAACI,MAAM,CAAE,CACX,KAAM,IAAI,CAAAX,KAAK,CACZ,qBAAoBO,UAAW,6GAClC,CACF,CAEAlB,CAAC,CAACY,IAAI,CACH,cAAaO,OAAO,CAACC,SAAU,kCAAiCF,UAAW,+BAC9E,CAAC,CACD,GAAII,MAAM,EAAIb,cAAc,CAAE,CAC5BT,CAAC,CAACY,IAAI,CACH,cAAaO,OAAO,CAACC,SAAU,wBAAuBF,UAAW,KACpE,CAAC,CACD,MAAO,CAAAT,cAAc,CAACa,MAAM,CAAEH,OAAO,CACvC,CAEA,MAAO,CAAAG,MACT,CACF"}