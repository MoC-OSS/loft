{"version":3,"file":"SessionStorage.js","names":["deepEqual","getTimestamp","Session","getLogger","l","SessionStorage","constructor","client","sessionTtl","appName","info","getChatCompletionSessionKey","sessionId","systemMessageName","isExists","sessionKey","result","exists","createSession","systemMessage","model","modelPreset","examples","messages","timestamp","userMessage","Error","session","lastMessageByRole","user","assistant","handlersCount","ctx","messageAccumulator","createdAt","updatedAt","lastError","set","JSON","stringify","appendMessages","newMessages","getSession","forEach","newMessage","push","author","error","appendMessagesToAccumulator","deleteSession","del","deleteSessionsById","keys","findKeysByPartialName","partialKey","incrementHandlerCount","handlerName","save","existingSession","warn","length","message","sessionData","get","SessionData","parse"],"sources":["../../src/session/SessionStorage.ts"],"sourcesContent":["import { Redis, Cluster } from 'ioredis';\nimport { SessionProps } from '../@types';\nimport { deepEqual, getTimestamp } from '../helpers';\nimport { Session } from './Session';\nimport { ChatHistory } from './ChatHistory';\nimport { Message } from './Message';\nimport { getLogger } from './../Logger';\n\nconst l = getLogger('SessionStorage');\n\nexport class SessionStorage {\n  constructor(\n    private readonly client: Redis | Cluster,\n    private readonly sessionTtl: number,\n    private readonly appName: string,\n  ) {\n    l.info('SessionStorage initialization...');\n  }\n\n  private getChatCompletionSessionKey(\n    sessionId: string,\n    systemMessageName: string,\n  ): string {\n    return `app:${this.appName}:api_type:chat_completion:function:session_storage:session:${sessionId}:system_message:${systemMessageName}`;\n  }\n\n  async isExists(\n    sessionId: string,\n    systemMessageName: string,\n  ): Promise<boolean> {\n    const sessionKey = this.getChatCompletionSessionKey(\n      sessionId,\n      systemMessageName,\n    );\n    l.info(`Check session exists by key: ${sessionKey}`);\n    const result = await this.client.exists(sessionKey);\n    return result === 1;\n  }\n\n  async createSession(\n    sessionId: string,\n    systemMessageName: string,\n    systemMessage: string,\n    model: string,\n    modelPreset: SessionProps['modelPreset'],\n    examples: SessionProps['examples'],\n    messages: Message[],\n  ): Promise<void> {\n    const sessionKey = this.getChatCompletionSessionKey(\n      sessionId,\n      systemMessageName,\n    );\n    l.info(`Create session by key: ${sessionKey}`);\n    const timestamp = getTimestamp();\n    const [userMessage] = messages;\n\n    if (!systemMessage && !userMessage) {\n      throw new Error(\"Can't create session without system and user messages\");\n    }\n\n    const session = new Session(this, {\n      sessionId,\n      systemMessageName,\n      systemMessage,\n      model,\n      modelPreset,\n      messages: messages as ChatHistory,\n      examples,\n      lastMessageByRole: {\n        user: userMessage,\n        assistant: null,\n      },\n      handlersCount: {},\n      ctx: {},\n      messageAccumulator: [],\n      createdAt: timestamp,\n      updatedAt: timestamp,\n      lastError: null,\n    });\n\n    await this.client.set(\n      sessionKey,\n      JSON.stringify(session),\n      'EX',\n      this.sessionTtl,\n    );\n  }\n\n  async appendMessages(\n    sessionId: string,\n    systemMessageName: string,\n    newMessages: Message[],\n  ): Promise<void> {\n    try {\n      l.info(\n        `Append messages to session ${sessionId}, systemMessageName: ${systemMessageName}`,\n      );\n\n      const session = await this.getSession(sessionId, systemMessageName);\n\n      newMessages.forEach((newMessage) => {\n        session.messages.push(newMessage);\n\n        session.lastMessageByRole[newMessage.author] = newMessage;\n      });\n      session.updatedAt = getTimestamp();\n\n      const sessionKey = this.getChatCompletionSessionKey(\n        sessionId,\n        systemMessageName,\n      );\n\n      if (!session.messageAccumulator) {\n        session.messageAccumulator = [];\n      }\n\n      await this.client.set(\n        sessionKey,\n        JSON.stringify(session),\n        'EX',\n        this.sessionTtl,\n      );\n    } catch (error) {\n      l.error(error);\n      throw error;\n    }\n  }\n\n  async appendMessagesToAccumulator(\n    sessionId: string,\n    systemMessageName: string,\n    newMessages: Message[],\n    session?: Session,\n  ): Promise<void> {\n    if (!session) {\n      session = await this.getSession(sessionId, systemMessageName);\n    }\n\n    if (!session.messageAccumulator) {\n      session.messageAccumulator = [];\n    }\n\n    session.messageAccumulator.push(...newMessages);\n\n    const sessionKey = this.getChatCompletionSessionKey(\n      sessionId,\n      systemMessageName,\n    );\n\n    await this.client.set(\n      sessionKey,\n      JSON.stringify(session),\n      'EX',\n      this.sessionTtl,\n    );\n  }\n\n  async deleteSession(\n    sessionId: string,\n    systemMessageName: string,\n  ): Promise<void> {\n    const sessionKey = this.getChatCompletionSessionKey(\n      sessionId,\n      systemMessageName,\n    );\n    l.info(`Delete session by key: ${sessionKey}`);\n\n    await this.client.del(sessionKey);\n  }\n\n  async deleteSessionsById(sessionId: string) {\n    l.info(`Delete sessions by id: ${sessionId}`);\n    const keys = await this.findKeysByPartialName(sessionId);\n    await this.client.del(keys);\n  }\n  private async findKeysByPartialName(partialKey: string) {\n    try {\n      l.info(`Find keys by partial name: ${partialKey}`);\n      return this.client.keys(`*${partialKey}*`);\n    } catch (error) {\n      l.error(error);\n      throw error;\n    }\n  }\n\n  async incrementHandlerCount(\n    sessionId: string,\n    systemMessageName: string,\n    handlerName: string,\n  ) {\n    l.info(\n      `Increment handler count: ${handlerName}, sessionId: ${sessionId}, systemMessageName: ${systemMessageName}`,\n    );\n    const session = await this.getSession(sessionId, systemMessageName);\n    if (!session.handlersCount[handlerName]) {\n      session.handlersCount[handlerName] = 0;\n    }\n    session.handlersCount[handlerName] += 1;\n    const sessionKey = this.getChatCompletionSessionKey(\n      sessionId,\n      systemMessageName,\n    );\n    await this.client.set(\n      sessionKey,\n      JSON.stringify(session),\n      'EX',\n      this.sessionTtl,\n    );\n  }\n\n  async save(session: Session): Promise<Session> {\n    l.info(\n      `Save session: ${session.sessionId}, systemMessageName: ${session.systemMessageName}`,\n    );\n    const existingSession = await this.getSession(\n      session.sessionId,\n      session.systemMessageName,\n    );\n\n    // fix redis frequency save by the same key issue\n    if (deepEqual(existingSession, session)) {\n      l.warn(\n        `sessionId ${session.sessionId}, systemMessageName: ${session.systemMessageName} - session not changed, skip save and return existing session`,\n      );\n      return existingSession;\n    }\n\n    existingSession.messages.length = 0;\n    session.messages.forEach((message) => {\n      existingSession.messages.push(message);\n      existingSession.lastMessageByRole[message.author] = message;\n    });\n\n    existingSession.ctx = session.ctx;\n    existingSession.updatedAt = getTimestamp();\n    existingSession.messageAccumulator = session.messageAccumulator;\n    existingSession.lastError = session.lastError;\n\n    const sessionKey = this.getChatCompletionSessionKey(\n      session.sessionId,\n      session.systemMessageName,\n    );\n\n    await this.client.set(\n      sessionKey,\n      JSON.stringify(existingSession),\n      'EX',\n      this.sessionTtl,\n    );\n\n    return this.getSession(session.sessionId, session.systemMessageName);\n  }\n\n  async getSession(\n    sessionId: string,\n    systemMessageName: string,\n  ): Promise<Session> {\n    try {\n      l.info(\n        `Get session: ${sessionId}, systemMessageName: ${systemMessageName}`,\n      );\n      const sessionKey = this.getChatCompletionSessionKey(\n        sessionId,\n        systemMessageName,\n      );\n      const sessionData = await this.client.get(sessionKey);\n      if (!sessionData) {\n        throw new Error(`Session ${sessionId} not found`);\n      }\n\n      const SessionData = JSON.parse(sessionData) as SessionProps;\n      const session = new Session(this, SessionData);\n\n      return session;\n    } catch (error) {\n      l.error(error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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"}