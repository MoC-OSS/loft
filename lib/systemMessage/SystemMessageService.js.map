{"version":3,"file":"SystemMessageService.js","names":["getLogger","l","SystemMessageService","systemMessageComputers","Map","constructor","systemMessageStorage","s3","info","use","name","systemMessageComputer","has","Error","set","syncSystemMessages","systemMessages","getSystemMessages","computeSystemMessage","systemMessageName","context","get","systemMessage","getSystemMessageByName"],"sources":["../../src/systemMessage/SystemMessageService.ts"],"sourcesContent":["import {\n  ChatInputPayload,\n  InputPayload,\n  SystemMessageComputer,\n  SystemMessageComputers,\n} from '../@types';\nimport { SystemMessageType } from '../schema/CreateChatCompletionRequestSchema';\nimport { SystemMessageStorage } from './SystemMessageStorage';\nimport { getLogger } from './../Logger';\nimport { IStorageService } from '../memory/CloudObjectStorage';\n\nconst l = getLogger('SystemMessageService');\n\nexport class SystemMessageService {\n  private systemMessageComputers: SystemMessageComputers = new Map();\n\n  constructor(\n    private readonly systemMessageStorage: SystemMessageStorage,\n    private readonly s3: IStorageService,\n  ) {\n    l.info('SystemMessageService initialization...');\n    this.systemMessageStorage = systemMessageStorage;\n  }\n\n  use(name: string, systemMessageComputer: SystemMessageComputer) {\n    if (this.systemMessageComputers.has(name)) {\n      throw new Error(\n        `A systemMessage computer with the name \"${name}\" already exists.`,\n      );\n    }\n    l.info(`Registered systemMessage computer with the name \"${name}\".`);\n    this.systemMessageComputers.set(name, systemMessageComputer);\n  }\n\n  async syncSystemMessages(): Promise<void> {\n    l.info('getting systemMessages from S3...');\n    const systemMessages = await this.s3.getSystemMessages();\n    l.info('syncing systemMessages to redis...');\n    await this.systemMessageStorage.syncSystemMessages(systemMessages);\n  }\n\n  async computeSystemMessage(\n    systemMessageName: string,\n    context: ChatInputPayload,\n  ): Promise<SystemMessageType> {\n    l.info(`getting systemMessage: ${systemMessageName} computer from map...`);\n    const systemMessageComputer =\n      this.systemMessageComputers.get(systemMessageName);\n    l.info(`getting systemMessage: ${systemMessageName} from redis...`);\n    const systemMessage =\n      await this.systemMessageStorage.getSystemMessageByName(systemMessageName);\n\n    if (!systemMessage) {\n      throw new Error(\n        `SystemMessage with name \"${systemMessageName}\" does not exist. Please upload SystemMessages with model presets to AWS S3 for sync to Redis and restart the App.`,\n      );\n    }\n\n    l.info(\n      `checking if systemMessage by name: ${systemMessageName} and systemMessageComputer exists...`,\n    );\n    if (systemMessage && systemMessageComputer) {\n      l.info(\n        `computing systemMessage: ${systemMessageName} with systemMessageComputer...`,\n      );\n      return systemMessageComputer(systemMessage, context);\n    }\n\n    return systemMessage;\n  }\n}\n"],"mappings":"AAQA,OAASA,SAAS,KAAQ,aAAa,CAGvC,KAAM,CAAAC,CAAC,CAAGD,SAAS,CAAC,sBAAsB,CAAC,CAE3C,MAAO,MAAM,CAAAE,oBAAqB,CACxBC,sBAAsB,CAA2B,GAAI,CAAAC,GAAK,CAElEC,WAAWA,CACQC,oBAA0C,CAC1CC,EAAmB,CACpC,MAFiBD,oBAA0C,CAA1CA,oBAA0C,MAC1CC,EAAmB,CAAnBA,EAAmB,CAEpCN,CAAC,CAACO,IAAI,CAAC,wCAAwC,CAAC,CAChD,IAAI,CAACF,oBAAoB,CAAGA,oBAC9B,CAEAG,GAAGA,CAACC,IAAY,CAAEC,qBAA4C,CAAE,CAC9D,GAAI,IAAI,CAACR,sBAAsB,CAACS,GAAG,CAACF,IAAI,CAAC,CAAE,CACzC,KAAM,IAAI,CAAAG,KAAK,CACZ,2CAA0CH,IAAK,mBAClD,CACF,CACAT,CAAC,CAACO,IAAI,CAAE,oDAAmDE,IAAK,IAAG,CAAC,CACpE,IAAI,CAACP,sBAAsB,CAACW,GAAG,CAACJ,IAAI,CAAEC,qBAAqB,CAC7D,CAEA,KAAM,CAAAI,kBAAkBA,CAAA,CAAkB,CACxCd,CAAC,CAACO,IAAI,CAAC,mCAAmC,CAAC,CAC3C,KAAM,CAAAQ,cAAc,CAAG,KAAM,KAAI,CAACT,EAAE,CAACU,iBAAiB,CAAC,CAAC,CACxDhB,CAAC,CAACO,IAAI,CAAC,oCAAoC,CAAC,CAC5C,KAAM,KAAI,CAACF,oBAAoB,CAACS,kBAAkB,CAACC,cAAc,CACnE,CAEA,KAAM,CAAAE,oBAAoBA,CACxBC,iBAAyB,CACzBC,OAAyB,CACG,CAC5BnB,CAAC,CAACO,IAAI,CAAE,0BAAyBW,iBAAkB,uBAAsB,CAAC,CAC1E,KAAM,CAAAR,qBAAqB,CACzB,IAAI,CAACR,sBAAsB,CAACkB,GAAG,CAACF,iBAAiB,CAAC,CACpDlB,CAAC,CAACO,IAAI,CAAE,0BAAyBW,iBAAkB,gBAAe,CAAC,CACnE,KAAM,CAAAG,aAAa,CACjB,KAAM,KAAI,CAAChB,oBAAoB,CAACiB,sBAAsB,CAACJ,iBAAiB,CAAC,CAE3E,GAAI,CAACG,aAAa,CAAE,CAClB,KAAM,IAAI,CAAAT,KAAK,CACZ,4BAA2BM,iBAAkB,oHAChD,CACF,CAEAlB,CAAC,CAACO,IAAI,CACH,sCAAqCW,iBAAkB,sCAC1D,CAAC,CACD,GAAIG,aAAa,EAAIX,qBAAqB,CAAE,CAC1CV,CAAC,CAACO,IAAI,CACH,4BAA2BW,iBAAkB,gCAChD,CAAC,CACD,MAAO,CAAAR,qBAAqB,CAACW,aAAa,CAAEF,OAAO,CACrD,CAEA,MAAO,CAAAE,aACT,CACF"}